# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Article {
  articleBanner: String!
  articleId: String!
  articleType: Float!
  authorId: String!
  belongsToCommunity: Float!
  comments: [Comments!]!
  communityId: String!
  content: String!
  createdOn: Float!
  durationOfArticle: Float!
  edited: Float!
  lastEditedOn: Float
  likes: [Likes!]!
  moderationStatus: Float!
  preview: String!
  tags: [Tags!]!
  title: String!
  views: Float!
}

type Bookmarks {
  articleId: String!
  bookmarkedOn: Float!
}

input CheckUserIfUnique {
  email: String
  username: String
}

type Comments {
  comment: String!
  commentedOn: Float!
  commentId: String!
  userId: String!
}

type Community {
  about: String!
  communityBanner: String!
  communityDp: String!
  communityId: String!
  communityType: Float!
  createdOn: Float!
  name: String!
  rules: String!
}

input CreateNewUser {
  email: String!
  fullname: String!
  gender: Float
  password: String!
  userBio: String
  username: String!
}

input FindUser {
  email: String
  userId: String
  username: String
}

type History {
  articleId: String!
  visitedOn: Float!
}

type Likes {
  likedOn: Float!
  userId: String!
}

input LogUser {
  email: String!
  password: String!
}

type Mutation {
  addTestArticle: Article!
  addTestCommunity: Community!
  createNewUser(data: CreateNewUser!): User
  deleteUser(where: FindUser!): Boolean
  loginExistingUser(where: LogUser!): User
  updateUser(data: UpdateUser!, where: FindUser!): User
}

type Query {
  articles: [Article!]!
  communities: [Community!]!
  helloFromArticle: String!
  helloFromCommunity: String!
  isUserUnique(where: CheckUserIfUnique!): Boolean!
  user(where: FindUser!): User
  users: [User!]!
}

type SocialLinks {
  github: String
  link: String
  linkedin: String
  twitter: String
}

input SocialLinksInput {
  github: String
  link: String
  linkedin: String
  twitter: String
}

type Tags {
  addedOn: Float!
  tag: String!
}

input UpdateUser {
  email: String
  fullname: String
  gender: Float
  profileImage: String
  socialLinks: SocialLinksInput
  userBio: String
  username: String
}

type User {
  accountCreatedOn: Float!
  accountInitialised: Int
  accountType: Int
  authToken: String
  bookmarks: [Bookmarks!]
  email: String!
  emailVerified: Int
  fullname: String!
  gender: Int!
  history: [History!]
  profileImage: String!
  socialLinks: SocialLinks
  userBio: String!
  userId: String!
  username: String!
}
